{
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ALICE_DATA",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BOB_DATA",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "alice_age",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bob_age",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "checkthehash",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstUser",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key1",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "key2",
          "type": "bytes32"
        }
      ],
      "name": "hash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "secondUser",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/Confidential.sol"
  },
  "ast": {
    "absolutePath": "contracts/Confidential.sol",
    "exportedSymbols": {
      "Confidential": [
        77
      ]
    },
    "id": 78,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          "0.8",
          ".7"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:22:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 77,
        "linearizedBaseContracts": [
          77
        ],
        "name": "Confidential",
        "nameLocation": "148:12:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "functionSelector": "88da70ec",
            "id": 4,
            "mutability": "mutable",
            "name": "firstUser",
            "nameLocation": "181:9:0",
            "nodeType": "VariableDeclaration",
            "scope": 77,
            "src": "167:33:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 2,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "167:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "414c494345",
              "id": 3,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "193:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_ab1c679b95f02899dcb97b3404e8ac388504a2e78a30d99d5502d12353e2f8f7",
                "typeString": "literal_string \"ALICE\""
              },
              "value": "ALICE"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "df7ad486",
            "id": 7,
            "mutability": "mutable",
            "name": "alice_age",
            "nameLocation": "218:9:0",
            "nodeType": "VariableDeclaration",
            "scope": 77,
            "src": "206:26:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 5,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "206:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3234",
              "id": 6,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "230:2:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_24_by_1",
                "typeString": "int_const 24"
              },
              "value": "24"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 9,
            "mutability": "mutable",
            "name": "ALICE_PRIVATE_KEY",
            "nameLocation": "254:17:0",
            "nodeType": "VariableDeclaration",
            "scope": 77,
            "src": "238:33:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 8,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "238:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "functionSelector": "ace674eb",
            "id": 12,
            "mutability": "mutable",
            "name": "ALICE_DATA",
            "nameLocation": "311:10:0",
            "nodeType": "VariableDeclaration",
            "scope": 77,
            "src": "296:38:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 10,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "296:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "hexValue": "515778705932554b",
              "id": 11,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "324:10:0",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_57c67f5576314386e2d73bc52b1611197a8d616edc0a9d2c63219830b63c02e7",
                "typeString": "literal_string \"QWxpY2UK\""
              },
              "value": "QWxpY2UK"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 18,
            "mutability": "mutable",
            "name": "aliceHash",
            "nameLocation": "356:9:0",
            "nodeType": "VariableDeclaration",
            "scope": 77,
            "src": "340:63:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 13,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "340:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "id": 15,
                  "name": "ALICE_PRIVATE_KEY",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 9,
                  "src": "373:17:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                {
                  "id": 16,
                  "name": "ALICE_DATA",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 12,
                  "src": "392:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                ],
                "id": 14,
                "name": "hash",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 57,
                "src": "368:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
                  "typeString": "function (bytes32,bytes32) pure returns (bytes32)"
                }
              },
              "id": 17,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "368:35:0",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "functionSelector": "8bf93441",
            "id": 21,
            "mutability": "mutable",
            "name": "secondUser",
            "nameLocation": "424:10:0",
            "nodeType": "VariableDeclaration",
            "scope": 77,
            "src": "410:32:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 19,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "410:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "value": {
              "hexValue": "424f42",
              "id": 20,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "437:5:0",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_29d93e4f9fb5004362e31d9828e4c67c1125ce4f9a86862014fd68039a2e4c38",
                "typeString": "literal_string \"BOB\""
              },
              "value": "BOB"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "f0a16b9b",
            "id": 24,
            "mutability": "mutable",
            "name": "bob_age",
            "nameLocation": "460:7:0",
            "nodeType": "VariableDeclaration",
            "scope": 77,
            "src": "448:24:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 22,
              "name": "uint",
              "nodeType": "ElementaryTypeName",
              "src": "448:4:0",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3231",
              "id": 23,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "470:2:0",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_21_by_1",
                "typeString": "int_const 21"
              },
              "value": "21"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 26,
            "mutability": "mutable",
            "name": "BOB_PRIVATE_KEY",
            "nameLocation": "494:15:0",
            "nodeType": "VariableDeclaration",
            "scope": 77,
            "src": "478:31:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 25,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "478:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "private"
          },
          {
            "constant": false,
            "functionSelector": "a803c473",
            "id": 29,
            "mutability": "mutable",
            "name": "BOB_DATA",
            "nameLocation": "550:8:0",
            "nodeType": "VariableDeclaration",
            "scope": 77,
            "src": "535:34:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 27,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "535:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "hexValue": "516d39694367",
              "id": 28,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "string",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "561:8:0",
              "typeDescriptions": {
                "typeIdentifier": "t_stringliteral_67e659a0447ab14ed1997d5330eb98bc903cbfd46937281eeaab308a0bcef6c7",
                "typeString": "literal_string \"Qm9iCg\""
              },
              "value": "Qm9iCg"
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "id": 35,
            "mutability": "mutable",
            "name": "bobHash",
            "nameLocation": "591:7:0",
            "nodeType": "VariableDeclaration",
            "scope": 77,
            "src": "575:57:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 30,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "575:7:0",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "id": 32,
                  "name": "BOB_PRIVATE_KEY",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 26,
                  "src": "606:15:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                {
                  "id": 33,
                  "name": "BOB_DATA",
                  "nodeType": "Identifier",
                  "overloadedDeclarations": [],
                  "referencedDeclaration": 29,
                  "src": "623:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                ],
                "id": 31,
                "name": "hash",
                "nodeType": "Identifier",
                "overloadedDeclarations": [],
                "referencedDeclaration": 57,
                "src": "601:4:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
                  "typeString": "function (bytes32,bytes32) pure returns (bytes32)"
                }
              },
              "id": 34,
              "isConstant": false,
              "isLValue": false,
              "isPure": false,
              "kind": "functionCall",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "601:31:0",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 38,
              "nodeType": "Block",
              "src": "653:2:0",
              "statements": []
            },
            "id": 39,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 36,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "650:2:0"
            },
            "returnParameters": {
              "id": 37,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "653:0:0"
            },
            "scope": 77,
            "src": "639:16:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 56,
              "nodeType": "Block",
              "src": "733:63:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 51,
                            "name": "key1",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 41,
                            "src": "777:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "id": 52,
                            "name": "key2",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 43,
                            "src": "783:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "expression": {
                            "id": 49,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "760:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 50,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "760:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 53,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "760:28:0",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 48,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "750:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 54,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "750:39:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "functionReturnParameters": 47,
                  "id": 55,
                  "nodeType": "Return",
                  "src": "743:46:0"
                }
              ]
            },
            "functionSelector": "412f9cac",
            "id": 57,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "hash",
            "nameLocation": "670:4:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 44,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 41,
                  "mutability": "mutable",
                  "name": "key1",
                  "nameLocation": "683:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 57,
                  "src": "675:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 40,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "675:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 43,
                  "mutability": "mutable",
                  "name": "key2",
                  "nameLocation": "697:4:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 57,
                  "src": "689:12:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 42,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "689:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "674:28:0"
            },
            "returnParameters": {
              "id": 47,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 46,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 57,
                  "src": "724:7:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 45,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "724:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "723:9:0"
            },
            "scope": 77,
            "src": "661:135:0",
            "stateMutability": "pure",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 75,
              "nodeType": "Block",
              "src": "866:80:0",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "commonType": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        },
                        "id": 70,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "id": 65,
                          "name": "_hash",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 59,
                          "src": "884:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "arguments": [
                            {
                              "id": 67,
                              "name": "aliceHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 18,
                              "src": "898:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "id": 68,
                              "name": "bobHash",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 35,
                              "src": "909:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 66,
                            "name": "hash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 57,
                            "src": "893:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
                              "typeString": "function (bytes32,bytes32) pure returns (bytes32)"
                            }
                          },
                          "id": 69,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "893:24:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "src": "884:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      ],
                      "id": 64,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        -18,
                        -18
                      ],
                      "referencedDeclaration": -18,
                      "src": "876:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                        "typeString": "function (bool) pure"
                      }
                    },
                    "id": 71,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "876:42:0",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 72,
                  "nodeType": "ExpressionStatement",
                  "src": "876:42:0"
                },
                {
                  "expression": {
                    "hexValue": "74727565",
                    "id": 73,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "bool",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "935:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    },
                    "value": "true"
                  },
                  "functionReturnParameters": 63,
                  "id": 74,
                  "nodeType": "Return",
                  "src": "928:11:0"
                }
              ]
            },
            "functionSelector": "35c57708",
            "id": 76,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "checkthehash",
            "nameLocation": "811:12:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 60,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 59,
                  "mutability": "mutable",
                  "name": "_hash",
                  "nameLocation": "832:5:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 76,
                  "src": "824:13:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 58,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "824:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "823:15:0"
            },
            "returnParameters": {
              "id": 63,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 62,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 76,
                  "src": "860:4:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 61,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "860:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "859:6:0"
            },
            "scope": 77,
            "src": "802:144:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 78,
        "src": "139:809:0",
        "usedErrors": []
      }
    ],
    "src": "32:917:0"
  },
  "bytecode": "60c06040526005608081905264414c49434560d81b60a090815261002691600091906100e8565b50601860015567515778705932554b60c01b60038181556002546040805160208082019390935280820194909452805180850382018152606085018083528151919093012060045560a084019052819052622127a160e91b6080909201918252610092916005916100e8565b50601560065565516d3969436760d01b600881905560075460408051602080820193909352808201939093528051808403820181526060909301905281519101206009553480156100e257600080fd5b506101bc565b8280546100f490610181565b90600052602060002090601f016020900481019282610116576000855561015c565b82601f1061012f57805160ff191683800117855561015c565b8280016001018555821561015c579182015b8281111561015c578251825591602001919060010190610141565b5061016892915061016c565b5090565b5b80821115610168576000815560010161016d565b600181811c9082168061019557607f821691505b602082108114156101b657634e487b7160e01b600052602260045260246000fd5b50919050565b610324806101cb6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a803c4731161005b578063a803c4731461011a578063ace674eb14610123578063df7ad4861461012c578063f0a16b9b1461013557600080fd5b806335c577081461008d578063412f9cac146100b557806388da70ec146100fd5780638bf9344114610112575b600080fd5b6100a061009b366004610223565b61013e565b60405190151581526020015b60405180910390f35b6100ef6100c336600461023c565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6040519081526020016100ac565b610105610188565b6040516100ac919061025e565b610105610216565b6100ef60085481565b6100ef60035481565b6100ef60015481565b6100ef60065481565b6000610175600454600954604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b821461018057600080fd5b506001919050565b60008054610195906102b3565b80601f01602080910402602001604051908101604052809291908181526020018280546101c1906102b3565b801561020e5780601f106101e35761010080835404028352916020019161020e565b820191906000526020600020905b8154815290600101906020018083116101f157829003601f168201915b505050505081565b60058054610195906102b3565b60006020828403121561023557600080fd5b5035919050565b6000806040838503121561024f57600080fd5b50508035926020909101359150565b600060208083528351808285015260005b8181101561028b5785810183015185820160400152820161026f565b8181111561029d576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c908216806102c757607f821691505b602082108114156102e857634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122037de12e2edd8178a1be33f02b58f49c3455eae383015e00036344cf1029ff29764736f6c63430008070033",
  "bytecodeSha1": "14c032f4cef83228ab222737464f7f07f92380b7",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.7+commit.e28d00a7"
  },
  "contractName": "Confidential",
  "coverageMap": {
    "branches": {
      "0": {
        "Confidential.checkthehash": {
          "3": [
            884,
            917,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Confidential.checkthehash": {
          "1": [
            876,
            918
          ],
          "2": [
            928,
            939
          ]
        },
        "Confidential.hash": {
          "0": [
            743,
            789
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100885760003560e01c8063a803c4731161005b578063a803c4731461011a578063ace674eb14610123578063df7ad4861461012c578063f0a16b9b1461013557600080fd5b806335c577081461008d578063412f9cac146100b557806388da70ec146100fd5780638bf9344114610112575b600080fd5b6100a061009b366004610223565b61013e565b60405190151581526020015b60405180910390f35b6100ef6100c336600461023c565b604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b6040519081526020016100ac565b610105610188565b6040516100ac919061025e565b610105610216565b6100ef60085481565b6100ef60035481565b6100ef60015481565b6100ef60065481565b6000610175600454600954604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b821461018057600080fd5b506001919050565b60008054610195906102b3565b80601f01602080910402602001604051908101604052809291908181526020018280546101c1906102b3565b801561020e5780601f106101e35761010080835404028352916020019161020e565b820191906000526020600020905b8154815290600101906020018083116101f157829003601f168201915b505050505081565b60058054610195906102b3565b60006020828403121561023557600080fd5b5035919050565b6000806040838503121561024f57600080fd5b50508035926020909101359150565b600060208083528351808285015260005b8181101561028b5785810183015185820160400152820161026f565b8181111561029d576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c908216806102c757607f821691505b602082108114156102e857634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122037de12e2edd8178a1be33f02b58f49c3455eae383015e00036344cf1029ff29764736f6c63430008070033",
  "deployedSourceMap": "139:809:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;802:144;;;;;;:::i;:::-;;:::i;:::-;;;869:14:1;;862:22;844:41;;832:2;817:18;802:144:0;;;;;;;;661:135;;;;;;:::i;:::-;760:28;;;;;;;609:19:1;;;;644:12;;;637:28;;;;760::0;;;;;;;;;681:12:1;;;;760:28:0;;750:39;;;;;;661:135;;;;1042:25:1;;;1030:2;1015:18;661:135:0;896:177:1;167:33:0;;;:::i;:::-;;;;;;;:::i;410:32::-;;;:::i;535:34::-;;;;;;296:38;;;;;;206:26;;;;;;448:24;;;;;;802:144;860:4;893:24;898:9;;909:7;;760:28;;;;;;;609:19:1;;;;644:12;;;637:28;;;;760::0;;;;;;;;;681:12:1;;;;760:28:0;;750:39;;;;;;661:135;893:24;884:5;:33;876:42;;;;;;-1:-1:-1;935:4:0;;802:144;-1:-1:-1;802:144:0:o;167:33::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;410:32::-;;;;;;;:::i;14:180:1:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:1;;14:180;-1:-1:-1;14:180:1:o;199:248::-;267:6;275;328:2;316:9;307:7;303:23;299:32;296:52;;;344:1;341;334:12;296:52;-1:-1:-1;;367:23:1;;;437:2;422:18;;;409:32;;-1:-1:-1;199:248:1:o;1078:597::-;1190:4;1219:2;1248;1237:9;1230:21;1280:6;1274:13;1323:6;1318:2;1307:9;1303:18;1296:34;1348:1;1358:140;1372:6;1369:1;1366:13;1358:140;;;1467:14;;;1463:23;;1457:30;1433:17;;;1452:2;1429:26;1422:66;1387:10;;1358:140;;;1516:6;1513:1;1510:13;1507:91;;;1586:1;1581:2;1572:6;1561:9;1557:22;1553:31;1546:42;1507:91;-1:-1:-1;1659:2:1;1638:15;-1:-1:-1;;1634:29:1;1619:45;;;;1666:2;1615:54;;1078:597;-1:-1:-1;;;1078:597:1:o;1862:380::-;1941:1;1937:12;;;;1984;;;2005:61;;2059:4;2051:6;2047:17;2037:27;;2005:61;2112:2;2104:6;2101:14;2081:18;2078:38;2075:161;;;2158:10;2153:3;2149:20;2146:1;2139:31;2193:4;2190:1;2183:15;2221:4;2218:1;2211:15;2075:161;;1862:380;;;:::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "offset": [
    139,
    948
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA803C473 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA803C473 EQ PUSH2 0x11A JUMPI DUP1 PUSH4 0xACE674EB EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0xDF7AD486 EQ PUSH2 0x12C JUMPI DUP1 PUSH4 0xF0A16B9B EQ PUSH2 0x135 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x35C57708 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x412F9CAC EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x88DA70EC EQ PUSH2 0xFD JUMPI DUP1 PUSH4 0x8BF93441 EQ PUSH2 0x112 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x223 JUMP JUMPDEST PUSH2 0x13E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEF PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0x23C JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP1 MLOAD DUP1 DUP4 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD SWAP1 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0x105 PUSH2 0x188 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAC SWAP2 SWAP1 PUSH2 0x25E JUMP JUMPDEST PUSH2 0x105 PUSH2 0x216 JUMP JUMPDEST PUSH2 0xEF PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xEF PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xEF PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH2 0xEF PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x175 PUSH1 0x4 SLOAD PUSH1 0x9 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP1 MLOAD DUP1 DUP4 SUB DUP3 ADD DUP2 MSTORE PUSH1 0x60 SWAP1 SWAP3 ADD SWAP1 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 SWAP1 JUMP JUMPDEST DUP3 EQ PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x195 SWAP1 PUSH2 0x2B3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1C1 SWAP1 PUSH2 0x2B3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x20E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1E3 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x20E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1F1 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH2 0x195 SWAP1 PUSH2 0x2B3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x235 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x28B JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x26F JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x29D JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x2C7 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x2E8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATACOPY 0xDE SLT 0xE2 0xED 0xD8 OR DUP11 SHL 0xE3 EXTCODEHASH MUL 0xB5 DUP16 0x49 0xC3 GASLIMIT 0x5E 0xAE CODESIZE ADDRESS ISZERO 0xE0 STOP CALLDATASIZE CALLVALUE 0x4C CALL MUL SWAP16 CALLCODE SWAP8 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        139,
        948
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "6": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "DUP1",
      "path": "0"
    },
    "7": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "12": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "DUP1",
      "path": "0"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "REVERT",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "17": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "POP",
      "path": "0"
    },
    "18": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "21": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "LT",
      "path": "0"
    },
    "22": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x88"
    },
    "25": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "29": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "SHR",
      "path": "0"
    },
    "32": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "DUP1",
      "path": "0"
    },
    "33": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA803C473"
    },
    "38": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "GT",
      "path": "0"
    },
    "39": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5B"
    },
    "42": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "43": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "DUP1",
      "path": "0"
    },
    "44": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA803C473"
    },
    "49": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "EQ",
      "path": "0"
    },
    "50": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x11A"
    },
    "53": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "54": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "DUP1",
      "path": "0"
    },
    "55": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xACE674EB"
    },
    "60": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "EQ",
      "path": "0"
    },
    "61": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x123"
    },
    "64": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "65": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "DUP1",
      "path": "0"
    },
    "66": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xDF7AD486"
    },
    "71": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "EQ",
      "path": "0"
    },
    "72": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12C"
    },
    "75": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "76": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "DUP1",
      "path": "0"
    },
    "77": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xF0A16B9B"
    },
    "82": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "EQ",
      "path": "0"
    },
    "83": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x135"
    },
    "86": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "87": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "89": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "DUP1",
      "path": "0"
    },
    "90": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "REVERT",
      "path": "0"
    },
    "91": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "92": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "DUP1",
      "path": "0"
    },
    "93": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x35C57708"
    },
    "98": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "EQ",
      "path": "0"
    },
    "99": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8D"
    },
    "102": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "103": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "DUP1",
      "path": "0"
    },
    "104": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x412F9CAC"
    },
    "109": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "EQ",
      "path": "0"
    },
    "110": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xB5"
    },
    "113": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "114": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "DUP1",
      "path": "0"
    },
    "115": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x88DA70EC"
    },
    "120": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "EQ",
      "path": "0"
    },
    "121": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xFD"
    },
    "124": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "125": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "DUP1",
      "path": "0"
    },
    "126": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x8BF93441"
    },
    "131": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "EQ",
      "path": "0"
    },
    "132": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x112"
    },
    "135": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "136": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "137": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "139": {
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "DUP1",
      "path": "0"
    },
    "140": {
      "first_revert": true,
      "fn": null,
      "offset": [
        139,
        948
      ],
      "op": "REVERT",
      "path": "0"
    },
    "141": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "142": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA0"
    },
    "145": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9B"
    },
    "148": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "149": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "151": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x223"
    },
    "154": {
      "fn": "Confidential.checkthehash",
      "jump": "i",
      "offset": [
        802,
        946
      ],
      "op": "JUMP",
      "path": "0"
    },
    "155": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "156": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x13E"
    },
    "159": {
      "fn": "Confidential.checkthehash",
      "jump": "i",
      "offset": [
        802,
        946
      ],
      "op": "JUMP",
      "path": "0"
    },
    "160": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "161": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "163": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "164": {
      "op": "SWAP1"
    },
    "165": {
      "op": "ISZERO"
    },
    "166": {
      "op": "ISZERO"
    },
    "167": {
      "op": "DUP2"
    },
    "168": {
      "op": "MSTORE"
    },
    "169": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "171": {
      "op": "ADD"
    },
    "172": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "173": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "175": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "176": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "DUP1",
      "path": "0"
    },
    "177": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "178": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "SUB",
      "path": "0"
    },
    "179": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "180": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "RETURN",
      "path": "0"
    },
    "181": {
      "fn": "Confidential.hash",
      "offset": [
        661,
        796
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "182": {
      "fn": "Confidential.hash",
      "offset": [
        661,
        796
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEF"
    },
    "185": {
      "fn": "Confidential.hash",
      "offset": [
        661,
        796
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC3"
    },
    "188": {
      "fn": "Confidential.hash",
      "offset": [
        661,
        796
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "189": {
      "fn": "Confidential.hash",
      "offset": [
        661,
        796
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "191": {
      "fn": "Confidential.hash",
      "offset": [
        661,
        796
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x23C"
    },
    "194": {
      "fn": "Confidential.hash",
      "jump": "i",
      "offset": [
        661,
        796
      ],
      "op": "JUMP",
      "path": "0"
    },
    "195": {
      "fn": "Confidential.hash",
      "offset": [
        661,
        796
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "196": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 0,
      "value": "0x40"
    },
    "198": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP1",
      "path": "0"
    },
    "199": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "200": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "202": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP1",
      "path": "0"
    },
    "203": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP3",
      "path": "0"
    },
    "204": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "ADD",
      "path": "0"
    },
    "205": {
      "op": "SWAP5"
    },
    "206": {
      "op": "SWAP1"
    },
    "207": {
      "op": "SWAP5"
    },
    "208": {
      "op": "MSTORE"
    },
    "209": {
      "op": "DUP1"
    },
    "210": {
      "op": "DUP3"
    },
    "211": {
      "op": "ADD"
    },
    "212": {
      "op": "SWAP3"
    },
    "213": {
      "op": "SWAP1"
    },
    "214": {
      "op": "SWAP3"
    },
    "215": {
      "op": "MSTORE"
    },
    "216": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP1",
      "path": "0"
    },
    "217": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "218": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP1",
      "path": "0"
    },
    "219": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP4",
      "path": "0"
    },
    "220": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "SUB",
      "path": "0"
    },
    "221": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP3",
      "path": "0"
    },
    "222": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "ADD",
      "path": "0"
    },
    "223": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP2",
      "path": "0"
    },
    "224": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "225": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "227": {
      "op": "SWAP1"
    },
    "228": {
      "op": "SWAP3"
    },
    "229": {
      "op": "ADD"
    },
    "230": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "231": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "232": {
      "fn": "Confidential.hash",
      "offset": [
        750,
        789
      ],
      "op": "DUP1",
      "path": "0"
    },
    "233": {
      "fn": "Confidential.hash",
      "offset": [
        750,
        789
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "234": {
      "fn": "Confidential.hash",
      "offset": [
        750,
        789
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "235": {
      "fn": "Confidential.hash",
      "offset": [
        750,
        789
      ],
      "op": "ADD",
      "path": "0"
    },
    "236": {
      "fn": "Confidential.hash",
      "offset": [
        750,
        789
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "237": {
      "fn": "Confidential.hash",
      "offset": [
        750,
        789
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "238": {
      "fn": "Confidential.hash",
      "offset": [
        661,
        796
      ],
      "op": "JUMP",
      "path": "0"
    },
    "239": {
      "fn": "Confidential.hash",
      "offset": [
        661,
        796
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "240": {
      "fn": "Confidential.hash",
      "offset": [
        661,
        796
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "242": {
      "fn": "Confidential.hash",
      "offset": [
        661,
        796
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "243": {
      "op": "SWAP1"
    },
    "244": {
      "op": "DUP2"
    },
    "245": {
      "op": "MSTORE"
    },
    "246": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "248": {
      "op": "ADD"
    },
    "249": {
      "fn": "Confidential.hash",
      "offset": [
        661,
        796
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAC"
    },
    "252": {
      "op": "JUMP"
    },
    "253": {
      "offset": [
        167,
        200
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "254": {
      "fn": "Confidential.hash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x105"
    },
    "257": {
      "fn": "Confidential.hash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x188"
    },
    "260": {
      "fn": "Confidential.hash",
      "jump": "i",
      "offset": [
        167,
        200
      ],
      "op": "JUMP",
      "path": "0"
    },
    "261": {
      "fn": "Confidential.hash",
      "offset": [
        167,
        200
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "262": {
      "fn": "Confidential.hash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "264": {
      "fn": "Confidential.hash",
      "offset": [
        167,
        200
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "265": {
      "fn": "Confidential.hash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAC"
    },
    "268": {
      "fn": "Confidential.hash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "269": {
      "fn": "Confidential.hash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "270": {
      "fn": "Confidential.hash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x25E"
    },
    "273": {
      "fn": "Confidential.hash",
      "jump": "i",
      "offset": [
        167,
        200
      ],
      "op": "JUMP",
      "path": "0"
    },
    "274": {
      "offset": [
        410,
        442
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "275": {
      "fn": "Confidential.hash",
      "offset": [
        410,
        442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x105"
    },
    "278": {
      "fn": "Confidential.hash",
      "offset": [
        410,
        442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x216"
    },
    "281": {
      "fn": "Confidential.hash",
      "jump": "i",
      "offset": [
        410,
        442
      ],
      "op": "JUMP",
      "path": "0"
    },
    "282": {
      "offset": [
        535,
        569
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "283": {
      "fn": "Confidential.hash",
      "offset": [
        535,
        569
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEF"
    },
    "286": {
      "fn": "Confidential.hash",
      "offset": [
        535,
        569
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x8"
    },
    "288": {
      "fn": "Confidential.hash",
      "offset": [
        535,
        569
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "289": {
      "fn": "Confidential.hash",
      "offset": [
        535,
        569
      ],
      "op": "DUP2",
      "path": "0"
    },
    "290": {
      "fn": "Confidential.hash",
      "offset": [
        535,
        569
      ],
      "op": "JUMP",
      "path": "0"
    },
    "291": {
      "offset": [
        296,
        334
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "292": {
      "fn": "Confidential.hash",
      "offset": [
        296,
        334
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEF"
    },
    "295": {
      "fn": "Confidential.hash",
      "offset": [
        296,
        334
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "297": {
      "fn": "Confidential.hash",
      "offset": [
        296,
        334
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "298": {
      "fn": "Confidential.hash",
      "offset": [
        296,
        334
      ],
      "op": "DUP2",
      "path": "0"
    },
    "299": {
      "fn": "Confidential.hash",
      "offset": [
        296,
        334
      ],
      "op": "JUMP",
      "path": "0"
    },
    "300": {
      "offset": [
        206,
        232
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "301": {
      "fn": "Confidential.hash",
      "offset": [
        206,
        232
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEF"
    },
    "304": {
      "fn": "Confidential.hash",
      "offset": [
        206,
        232
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "306": {
      "fn": "Confidential.hash",
      "offset": [
        206,
        232
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "307": {
      "fn": "Confidential.hash",
      "offset": [
        206,
        232
      ],
      "op": "DUP2",
      "path": "0"
    },
    "308": {
      "fn": "Confidential.hash",
      "offset": [
        206,
        232
      ],
      "op": "JUMP",
      "path": "0"
    },
    "309": {
      "offset": [
        448,
        472
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "310": {
      "fn": "Confidential.hash",
      "offset": [
        448,
        472
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xEF"
    },
    "313": {
      "fn": "Confidential.hash",
      "offset": [
        448,
        472
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x6"
    },
    "315": {
      "fn": "Confidential.hash",
      "offset": [
        448,
        472
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "316": {
      "fn": "Confidential.hash",
      "offset": [
        448,
        472
      ],
      "op": "DUP2",
      "path": "0"
    },
    "317": {
      "fn": "Confidential.hash",
      "offset": [
        448,
        472
      ],
      "op": "JUMP",
      "path": "0"
    },
    "318": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "319": {
      "fn": "Confidential.checkthehash",
      "offset": [
        860,
        864
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "321": {
      "fn": "Confidential.checkthehash",
      "offset": [
        893,
        917
      ],
      "op": "PUSH2",
      "path": "0",
      "statement": 1,
      "value": "0x175"
    },
    "324": {
      "fn": "Confidential.checkthehash",
      "offset": [
        898,
        907
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "326": {
      "fn": "Confidential.checkthehash",
      "offset": [
        898,
        907
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "327": {
      "fn": "Confidential.checkthehash",
      "offset": [
        909,
        916
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x9"
    },
    "329": {
      "fn": "Confidential.checkthehash",
      "offset": [
        909,
        916
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "330": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "332": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP1",
      "path": "0"
    },
    "333": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "334": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "336": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP1",
      "path": "0"
    },
    "337": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP3",
      "path": "0"
    },
    "338": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "ADD",
      "path": "0"
    },
    "339": {
      "op": "SWAP5"
    },
    "340": {
      "op": "SWAP1"
    },
    "341": {
      "op": "SWAP5"
    },
    "342": {
      "op": "MSTORE"
    },
    "343": {
      "op": "DUP1"
    },
    "344": {
      "op": "DUP3"
    },
    "345": {
      "op": "ADD"
    },
    "346": {
      "op": "SWAP3"
    },
    "347": {
      "op": "SWAP1"
    },
    "348": {
      "op": "SWAP3"
    },
    "349": {
      "op": "MSTORE"
    },
    "350": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP1",
      "path": "0"
    },
    "351": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "352": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP1",
      "path": "0"
    },
    "353": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP4",
      "path": "0"
    },
    "354": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "SUB",
      "path": "0"
    },
    "355": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP3",
      "path": "0"
    },
    "356": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "ADD",
      "path": "0"
    },
    "357": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "DUP2",
      "path": "0"
    },
    "358": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "359": {
      "op": "PUSH1",
      "value": "0x60"
    },
    "361": {
      "op": "SWAP1"
    },
    "362": {
      "op": "SWAP3"
    },
    "363": {
      "op": "ADD"
    },
    "364": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "365": {
      "fn": "Confidential.hash",
      "offset": [
        760,
        788
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "366": {
      "fn": "Confidential.hash",
      "offset": [
        750,
        789
      ],
      "op": "DUP1",
      "path": "0"
    },
    "367": {
      "fn": "Confidential.hash",
      "offset": [
        750,
        789
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "368": {
      "fn": "Confidential.hash",
      "offset": [
        750,
        789
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "369": {
      "fn": "Confidential.hash",
      "offset": [
        750,
        789
      ],
      "op": "ADD",
      "path": "0"
    },
    "370": {
      "fn": "Confidential.hash",
      "offset": [
        750,
        789
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "371": {
      "fn": "Confidential.hash",
      "offset": [
        750,
        789
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "372": {
      "fn": "Confidential.hash",
      "offset": [
        661,
        796
      ],
      "op": "JUMP",
      "path": "0"
    },
    "373": {
      "fn": "Confidential.checkthehash",
      "offset": [
        893,
        917
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "374": {
      "fn": "Confidential.checkthehash",
      "offset": [
        884,
        889
      ],
      "op": "DUP3",
      "path": "0"
    },
    "375": {
      "branch": 3,
      "fn": "Confidential.checkthehash",
      "offset": [
        884,
        917
      ],
      "op": "EQ",
      "path": "0"
    },
    "376": {
      "fn": "Confidential.checkthehash",
      "offset": [
        876,
        918
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x180"
    },
    "379": {
      "branch": 3,
      "fn": "Confidential.checkthehash",
      "offset": [
        876,
        918
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "380": {
      "fn": "Confidential.checkthehash",
      "offset": [
        876,
        918
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "382": {
      "fn": "Confidential.checkthehash",
      "offset": [
        876,
        918
      ],
      "op": "DUP1",
      "path": "0"
    },
    "383": {
      "fn": "Confidential.checkthehash",
      "offset": [
        876,
        918
      ],
      "op": "REVERT",
      "path": "0"
    },
    "384": {
      "fn": "Confidential.checkthehash",
      "offset": [
        876,
        918
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "385": {
      "op": "POP"
    },
    "386": {
      "fn": "Confidential.checkthehash",
      "offset": [
        935,
        939
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 2,
      "value": "0x1"
    },
    "388": {
      "fn": "Confidential.checkthehash",
      "offset": [
        935,
        939
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "389": {
      "fn": "Confidential.checkthehash",
      "offset": [
        802,
        946
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "390": {
      "op": "POP"
    },
    "391": {
      "fn": "Confidential.checkthehash",
      "jump": "o",
      "offset": [
        802,
        946
      ],
      "op": "JUMP",
      "path": "0"
    },
    "392": {
      "offset": [
        167,
        200
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "393": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "395": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP1",
      "path": "0"
    },
    "396": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "397": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x195"
    },
    "400": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "401": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B3"
    },
    "404": {
      "fn": "Confidential.checkthehash",
      "jump": "i",
      "offset": [
        167,
        200
      ],
      "op": "JUMP",
      "path": "0"
    },
    "405": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "406": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP1",
      "path": "0"
    },
    "407": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "409": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "ADD",
      "path": "0"
    },
    "410": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "412": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP1",
      "path": "0"
    },
    "413": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "414": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DIV",
      "path": "0"
    },
    "415": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "MUL",
      "path": "0"
    },
    "416": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "418": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "ADD",
      "path": "0"
    },
    "419": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "421": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "422": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "423": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP2",
      "path": "0"
    },
    "424": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "ADD",
      "path": "0"
    },
    "425": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "427": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "428": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP1",
      "path": "0"
    },
    "429": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "430": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "431": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "432": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP2",
      "path": "0"
    },
    "433": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP2",
      "path": "0"
    },
    "434": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "435": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "437": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "ADD",
      "path": "0"
    },
    "438": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP3",
      "path": "0"
    },
    "439": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP1",
      "path": "0"
    },
    "440": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "441": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1C1"
    },
    "444": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "445": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B3"
    },
    "448": {
      "fn": "Confidential.checkthehash",
      "jump": "i",
      "offset": [
        167,
        200
      ],
      "op": "JUMP",
      "path": "0"
    },
    "449": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "450": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP1",
      "path": "0"
    },
    "451": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "452": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x20E"
    },
    "455": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "456": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP1",
      "path": "0"
    },
    "457": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "459": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "LT",
      "path": "0"
    },
    "460": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E3"
    },
    "463": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "464": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "467": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP1",
      "path": "0"
    },
    "468": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP4",
      "path": "0"
    },
    "469": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "470": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DIV",
      "path": "0"
    },
    "471": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "MUL",
      "path": "0"
    },
    "472": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP4",
      "path": "0"
    },
    "473": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "474": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "475": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "477": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "ADD",
      "path": "0"
    },
    "478": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "479": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x20E"
    },
    "482": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "JUMP",
      "path": "0"
    },
    "483": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "484": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP3",
      "path": "0"
    },
    "485": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "ADD",
      "path": "0"
    },
    "486": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "487": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "488": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "490": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "491": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "493": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "495": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "496": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "497": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "498": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP2",
      "path": "0"
    },
    "499": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "500": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP2",
      "path": "0"
    },
    "501": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "502": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "503": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "505": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "ADD",
      "path": "0"
    },
    "506": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "507": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "509": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "ADD",
      "path": "0"
    },
    "510": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP1",
      "path": "0"
    },
    "511": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP4",
      "path": "0"
    },
    "512": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "GT",
      "path": "0"
    },
    "513": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1F1"
    },
    "516": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "517": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP3",
      "path": "0"
    },
    "518": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "519": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SUB",
      "path": "0"
    },
    "520": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "522": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "AND",
      "path": "0"
    },
    "523": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP3",
      "path": "0"
    },
    "524": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "ADD",
      "path": "0"
    },
    "525": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "526": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "527": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "POP",
      "path": "0"
    },
    "528": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "POP",
      "path": "0"
    },
    "529": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "POP",
      "path": "0"
    },
    "530": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "POP",
      "path": "0"
    },
    "531": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "POP",
      "path": "0"
    },
    "532": {
      "fn": "Confidential.checkthehash",
      "offset": [
        167,
        200
      ],
      "op": "DUP2",
      "path": "0"
    },
    "533": {
      "fn": "Confidential.checkthehash",
      "jump": "o",
      "offset": [
        167,
        200
      ],
      "op": "JUMP",
      "path": "0"
    },
    "534": {
      "offset": [
        410,
        442
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "535": {
      "fn": "Confidential.checkthehash",
      "offset": [
        410,
        442
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x5"
    },
    "537": {
      "fn": "Confidential.checkthehash",
      "offset": [
        410,
        442
      ],
      "op": "DUP1",
      "path": "0"
    },
    "538": {
      "fn": "Confidential.checkthehash",
      "offset": [
        410,
        442
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "539": {
      "fn": "Confidential.checkthehash",
      "offset": [
        410,
        442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x195"
    },
    "542": {
      "fn": "Confidential.checkthehash",
      "offset": [
        410,
        442
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "543": {
      "fn": "Confidential.checkthehash",
      "offset": [
        410,
        442
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B3"
    },
    "546": {
      "fn": "Confidential.checkthehash",
      "jump": "i",
      "offset": [
        410,
        442
      ],
      "op": "JUMP",
      "path": "0"
    },
    "547": {
      "op": "JUMPDEST"
    },
    "548": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "550": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "552": {
      "op": "DUP3"
    },
    "553": {
      "op": "DUP5"
    },
    "554": {
      "op": "SUB"
    },
    "555": {
      "op": "SLT"
    },
    "556": {
      "op": "ISZERO"
    },
    "557": {
      "op": "PUSH2",
      "value": "0x235"
    },
    "560": {
      "op": "JUMPI"
    },
    "561": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "563": {
      "op": "DUP1"
    },
    "564": {
      "op": "REVERT"
    },
    "565": {
      "op": "JUMPDEST"
    },
    "566": {
      "op": "POP"
    },
    "567": {
      "op": "CALLDATALOAD"
    },
    "568": {
      "op": "SWAP2"
    },
    "569": {
      "op": "SWAP1"
    },
    "570": {
      "op": "POP"
    },
    "571": {
      "jump": "o",
      "op": "JUMP"
    },
    "572": {
      "op": "JUMPDEST"
    },
    "573": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "575": {
      "op": "DUP1"
    },
    "576": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "578": {
      "op": "DUP4"
    },
    "579": {
      "op": "DUP6"
    },
    "580": {
      "op": "SUB"
    },
    "581": {
      "op": "SLT"
    },
    "582": {
      "op": "ISZERO"
    },
    "583": {
      "op": "PUSH2",
      "value": "0x24F"
    },
    "586": {
      "op": "JUMPI"
    },
    "587": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "589": {
      "op": "DUP1"
    },
    "590": {
      "op": "REVERT"
    },
    "591": {
      "op": "JUMPDEST"
    },
    "592": {
      "op": "POP"
    },
    "593": {
      "op": "POP"
    },
    "594": {
      "op": "DUP1"
    },
    "595": {
      "op": "CALLDATALOAD"
    },
    "596": {
      "op": "SWAP3"
    },
    "597": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "599": {
      "op": "SWAP1"
    },
    "600": {
      "op": "SWAP2"
    },
    "601": {
      "op": "ADD"
    },
    "602": {
      "op": "CALLDATALOAD"
    },
    "603": {
      "op": "SWAP2"
    },
    "604": {
      "op": "POP"
    },
    "605": {
      "jump": "o",
      "op": "JUMP"
    },
    "606": {
      "op": "JUMPDEST"
    },
    "607": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "609": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "611": {
      "op": "DUP1"
    },
    "612": {
      "op": "DUP4"
    },
    "613": {
      "op": "MSTORE"
    },
    "614": {
      "op": "DUP4"
    },
    "615": {
      "op": "MLOAD"
    },
    "616": {
      "op": "DUP1"
    },
    "617": {
      "op": "DUP3"
    },
    "618": {
      "op": "DUP6"
    },
    "619": {
      "op": "ADD"
    },
    "620": {
      "op": "MSTORE"
    },
    "621": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "623": {
      "op": "JUMPDEST"
    },
    "624": {
      "op": "DUP2"
    },
    "625": {
      "op": "DUP2"
    },
    "626": {
      "op": "LT"
    },
    "627": {
      "op": "ISZERO"
    },
    "628": {
      "op": "PUSH2",
      "value": "0x28B"
    },
    "631": {
      "op": "JUMPI"
    },
    "632": {
      "op": "DUP6"
    },
    "633": {
      "op": "DUP2"
    },
    "634": {
      "op": "ADD"
    },
    "635": {
      "op": "DUP4"
    },
    "636": {
      "op": "ADD"
    },
    "637": {
      "op": "MLOAD"
    },
    "638": {
      "op": "DUP6"
    },
    "639": {
      "op": "DUP3"
    },
    "640": {
      "op": "ADD"
    },
    "641": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "643": {
      "op": "ADD"
    },
    "644": {
      "op": "MSTORE"
    },
    "645": {
      "op": "DUP3"
    },
    "646": {
      "op": "ADD"
    },
    "647": {
      "op": "PUSH2",
      "value": "0x26F"
    },
    "650": {
      "op": "JUMP"
    },
    "651": {
      "op": "JUMPDEST"
    },
    "652": {
      "op": "DUP2"
    },
    "653": {
      "op": "DUP2"
    },
    "654": {
      "op": "GT"
    },
    "655": {
      "op": "ISZERO"
    },
    "656": {
      "op": "PUSH2",
      "value": "0x29D"
    },
    "659": {
      "op": "JUMPI"
    },
    "660": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "662": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "664": {
      "op": "DUP4"
    },
    "665": {
      "op": "DUP8"
    },
    "666": {
      "op": "ADD"
    },
    "667": {
      "op": "ADD"
    },
    "668": {
      "op": "MSTORE"
    },
    "669": {
      "op": "JUMPDEST"
    },
    "670": {
      "op": "POP"
    },
    "671": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "673": {
      "op": "ADD"
    },
    "674": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "676": {
      "op": "NOT"
    },
    "677": {
      "op": "AND"
    },
    "678": {
      "op": "SWAP3"
    },
    "679": {
      "op": "SWAP1"
    },
    "680": {
      "op": "SWAP3"
    },
    "681": {
      "op": "ADD"
    },
    "682": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "684": {
      "op": "ADD"
    },
    "685": {
      "op": "SWAP4"
    },
    "686": {
      "op": "SWAP3"
    },
    "687": {
      "op": "POP"
    },
    "688": {
      "op": "POP"
    },
    "689": {
      "op": "POP"
    },
    "690": {
      "jump": "o",
      "op": "JUMP"
    },
    "691": {
      "op": "JUMPDEST"
    },
    "692": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "694": {
      "op": "DUP2"
    },
    "695": {
      "op": "DUP2"
    },
    "696": {
      "op": "SHR"
    },
    "697": {
      "op": "SWAP1"
    },
    "698": {
      "op": "DUP3"
    },
    "699": {
      "op": "AND"
    },
    "700": {
      "op": "DUP1"
    },
    "701": {
      "op": "PUSH2",
      "value": "0x2C7"
    },
    "704": {
      "op": "JUMPI"
    },
    "705": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "707": {
      "op": "DUP3"
    },
    "708": {
      "op": "AND"
    },
    "709": {
      "op": "SWAP2"
    },
    "710": {
      "op": "POP"
    },
    "711": {
      "op": "JUMPDEST"
    },
    "712": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "714": {
      "op": "DUP3"
    },
    "715": {
      "op": "LT"
    },
    "716": {
      "op": "DUP2"
    },
    "717": {
      "op": "EQ"
    },
    "718": {
      "op": "ISZERO"
    },
    "719": {
      "op": "PUSH2",
      "value": "0x2E8"
    },
    "722": {
      "op": "JUMPI"
    },
    "723": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "728": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "730": {
      "op": "SHL"
    },
    "731": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "733": {
      "op": "MSTORE"
    },
    "734": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "736": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "738": {
      "op": "MSTORE"
    },
    "739": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "741": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "743": {
      "op": "REVERT"
    },
    "744": {
      "op": "JUMPDEST"
    },
    "745": {
      "op": "POP"
    },
    "746": {
      "op": "SWAP2"
    },
    "747": {
      "op": "SWAP1"
    },
    "748": {
      "op": "POP"
    },
    "749": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "c379e6f549368dbb9aa9e2f94d2371e3b03eb8b7",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\n// https://goerli.etherscan.io/address/0xf8e9327e38ceb39b1ec3d26f5fad09e426888e66\n\ncontract Confidential {\n    string public firstUser = \"ALICE\";\n    uint public alice_age = 24;\n    bytes32 private ALICE_PRIVATE_KEY; //Super Secret Key\n    bytes32 public ALICE_DATA = \"QWxpY2UK\";\n    bytes32 private aliceHash = hash(ALICE_PRIVATE_KEY, ALICE_DATA);\n\n    string public secondUser = \"BOB\";\n    uint public bob_age = 21;\n    bytes32 private BOB_PRIVATE_KEY; // Super Secret Key\n    bytes32 public BOB_DATA = \"Qm9iCg\";\n    bytes32 private bobHash = hash(BOB_PRIVATE_KEY, BOB_DATA);\n\n    constructor() {}\n\n    function hash(bytes32 key1, bytes32 key2) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(key1, key2));\n    }\n\n    function checkthehash(bytes32 _hash) public view returns (bool) {\n        require(_hash == hash(aliceHash, bobHash));\n        return true;\n    }\n}\n",
  "sourceMap": "167:33:0:-:0;139:809;167:33;;139:809;167:33;;;-1:-1:-1;;;167:33:0;;;;;;-1:-1:-1;;167:33:0;;:::i;:::-;-1:-1:-1;230:2:0;206:26;;-1:-1:-1;;;296:38:0;;;;373:17;;760:28;;;;;;;171:19:1;;;;206:12;;;199:28;;;;760::0;;;;;;;;;243:12:1;;;760:28:0;;;750:39;;;;;;;340:63;;410:32;;;;;;;;-1:-1:-1;;;410:32:0;;;;;;;;;;;;:::i;:::-;-1:-1:-1;470:2:0;448:24;;-1:-1:-1;;;535:34:0;;;;606:15;;760:28;;;;;;;171:19:1;;;;206:12;;;199:28;;;;760::0;;;;;;;;;243:12:1;;;;760:28:0;;750:39;;;;;575:57;;639:16;;;;;;;;;;139:809;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;139:809:0;;;-1:-1:-1;139:809:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;266:380:1;345:1;341:12;;;;388;;;409:61;;463:4;455:6;451:17;441:27;;409:61;516:2;508:6;505:14;485:18;482:38;479:161;;;562:10;557:3;553:20;550:1;543:31;597:4;594:1;587:15;625:4;622:1;615:15;479:161;;266:380;;;:::o;:::-;139:809:0;;;;;;",
  "sourcePath": "contracts/Confidential.sol",
  "type": "contract"
}